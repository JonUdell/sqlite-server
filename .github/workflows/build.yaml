name: Build Binaries

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for this release (e.g. v0.1.0)"
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Create GitHub release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  build-linux:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make wget

    - name: Cache SQLite build
      uses: actions/cache@v4
      with:
        path: ~/sqlite
        key: ${{ runner.os }}-sqlite-3450300-v2

    - name: Build SQLite
      run: |
        wget https://www.sqlite.org/2024/sqlite-autoconf-3450300.tar.gz
        tar xzf sqlite-autoconf-3450300.tar.gz
        cd sqlite-autoconf-3450300
        export CFLAGS="-DSQLITE_ENABLE_LOAD_EXTENSION -DSQLITE_ALLOW_LOAD_EXTENSION"
        ./configure --prefix=$HOME/sqlite

        # üî• Force patch Makefile immediately
        sed -i 's|^CFLAGS = |CFLAGS = -DSQLITE_ENABLE_LOAD_EXTENSION -DSQLITE_ALLOW_LOAD_EXTENSION |' Makefile

        echo "üîç Checking config.log for compile flags:"
        grep -i allow_load_extension config.log || true
        grep -i enable_load_extension config.log || true

        echo "üîç Checking Makefile for compile flags after patch:"
        grep -i allow_load_extension Makefile || true
        grep -i enable_load_extension Makefile || true

        make CFLAGS="$CFLAGS"
        make install

    - name: üîé Check symbols in libsqlite3.a
      run: |
        nm -g ~/sqlite/lib/libsqlite3.a | grep sqlite3_enable_load_extension || echo "‚ùå Symbol not found"


    - name: üîç Check Go module cache for mattn/go-sqlite3
      run: |
        echo "üßπ Looking for any cached sqlite3 artifacts BEFORE patching"
        find /home/runner/go/pkg/mod/github.com/mattn/ -type f || echo "‚úÖ No cached mattn modules found"
        echo "üßπ Listing installed Go modules (in module mode)"
        go list -m all || true


    - name: Patch go-sqlite3
      run: |
        go clean -modcache
        git clone https://github.com/mattn/go-sqlite3.git
        go mod edit -replace github.com/mattn/go-sqlite3=./go-sqlite3
        cd go-sqlite3

        # 1. Apply robust extension loading patch
        # First: Add the extension loading flags to CGO
        sed -i 's|#cgo CFLAGS:|#cgo CFLAGS: -DSQLITE_ENABLE_LOAD_EXTENSION=1 -DSQLITE_ALLOW_LOAD_EXTENSION=1|' sqlite3.go
        
        # 2. Declare the C function in the Go code
        # Add the C function declaration to the top of the file
        sed -i '/^\/\/ #include <sqlite3ext.h>/a int sqlite3_enable_load_extension(sqlite3 *db, int onoff);' sqlite3.go
        
        # 3. Create a complete patch for enabling extension loading at connection time
        cat > conn_patch.go << 'EOF'
// LoadExtension loads a SQLite extension into the connection
func (c *SQLiteConn) LoadExtension(path string, entryPoint string) error {
	cPath := C.CString(path)
	defer C.free(unsafe.Pointer(cPath))

	var cEP *C.char
	if entryPoint != "" {
		cEP = C.CString(entryPoint)
		defer C.free(unsafe.Pointer(cEP))
	}

	db := c.db
	if db == nil {
		return errors.New("sqlite3 connection is closed")
	}

	// First, enable extension loading
	rv := C.sqlite3_enable_load_extension(db, 1)
	if rv != C.SQLITE_OK {
		return c.lastError()
	}

	var errMsg *C.char
	rv = C.sqlite3_load_extension(db, cPath, cEP, &errMsg)
	if rv != C.SQLITE_OK {
		defer C.sqlite3_free(unsafe.Pointer(errMsg))
		return errors.New(C.GoString(errMsg))
	}
	return nil
}
EOF

        # Add the LoadExtension method to conn.go
        sed -i '/^func (c \*SQLiteConn) Close() error {/i \\n'"$(cat conn_patch.go)"'\n' conn.go
        
        # 4. Create patch to enable extension loading at connection initialization
        cat > extension_patch.go <<'EOF'
        // Enable extension loading immediately
        if rv := C.sqlite3_enable_load_extension(db, 1); rv != C.SQLITE_OK {
            fmt.Printf("Warning: Failed to enable extension loading: %d\n", rv)
        } else {
            fmt.Println("‚úÖ Successfully enabled extension loading at connection time")
        }
EOF

        # Insert the patch right after the db is opened
        sed -i '/return nil, errors.New("sqlite succeeded without returning a database")/r extension_patch.go' sqlite3.go

        # Clean up
        rm extension_patch.go conn_patch.go


    - name: Force clean Go build
      run: |
        go clean -cache -modcache -i -r
        rm -f sqlite-server-linux || true


    - name: Build sqlite-server
      run: |
        export CGO_ENABLED=1
        export CGO_CFLAGS="-I$HOME/sqlite/include -DSQLITE_ENABLE_LOAD_EXTENSION=1 -DSQLITE_ALLOW_LOAD_EXTENSION=1"
        export CGO_LDFLAGS="-static $HOME/sqlite/lib/libsqlite3.a -ldl -lm"

        GOOS=linux GOARCH=amd64 go build \
          -tags "sqlite3_load_extension" \
          -ldflags="-linkmode external" \
          -v -o sqlite-server-linux

    - name: Check dynamic libraries linked
      run: |
        echo "üîç Checking linked libraries for sqlite-server-linux"
        ldd sqlite-server-linux || true

    - name: Create tar.gz archive
      run: |
        tar -czf sqlite-server-linux.tar.gz sqlite-server-linux

    - name: Upload Linux release asset
      uses: softprops/action-gh-release@v2
      with:
        files: sqlite-server-linux.tar.gz
        tag_name: ${{ github.event.inputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  build-mac:
    runs-on: macos-latest
    needs: build-linux
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build macOS ARM64 binary
      run: |
        GOOS=darwin GOARCH=arm64 go build -v -o sqlite-server-mac-arm

    - name: Create tar.gz archive
      run: |
        tar -czf sqlite-server-mac-arm.tar.gz sqlite-server-mac-arm

    - name: Upload macOS release asset
      uses: softprops/action-gh-release@v2
      with:
        files: sqlite-server-mac-arm.tar.gz
        tag_name: ${{ github.event.inputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  build-windows:
    runs-on: ubuntu-latest
    needs: build-mac
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build Windows binary
      run: |
        GOOS=windows GOARCH=amd64 go build -v -o sqlite-server-windows.exe

    - name: Create zip archive
      run: |
        zip sqlite-server-windows.zip sqlite-server-windows.exe

    - name: Upload Windows release asset
      uses: softprops/action-gh-release@v2
      with:
        files: sqlite-server-windows.zip
        tag_name: ${{ github.event.inputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
