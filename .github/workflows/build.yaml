name: Build Binaries

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for this release (e.g. v0.1.0)"
        required: true
        type: string

jobs:

  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove go-sqlite3 replace directive and regenerate go.sum
        run: |
          sed -i '/^replace github.com\/mattn\/go-sqlite3 =>/d' go.mod
          go mod tidy
      - name: Upload cleaned go.mod and go.sum
        uses: actions/upload-artifact@v4
        with:
          name: gomod
          path: |
            go.mod
            go.sum

  create-release:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  build:
    needs: [prepare, create-release]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
            archive: tar.gz
            out: xmlui-test-server
            label: linux-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            ext: ""
            archive: tar.gz
            out: xmlui-test-server
            label: mac-arm
          - os: ubuntu-latest
            goos: windows
            goarch: amd64
            ext: .exe
            archive: zip
            out: xmlui-test-server.exe
            label: windows
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: gomod
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Install build tools (Linux only)
        if: matrix.os == 'ubuntu-latest' && matrix.goos != 'windows'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install mingw-w64 for Windows CGO cross-compilation
        if: matrix.goos == 'windows'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          CC: ${{ matrix.goos == 'windows' && 'x86_64-w64-mingw32-gcc' || 'gcc' }}
        run: |
          go build -v -o ${{ matrix.out }}
          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            zip xmlui-test-server-${{ matrix.label }}.${{ matrix.archive }} ${{ matrix.out }}
          else
            tar -czf xmlui-test-server-${{ matrix.label }}.${{ matrix.archive }} ${{ matrix.out }}
          fi

      - name: Upload to GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: xmlui-test-server-${{ matrix.label }}.${{ matrix.archive }}
          tag_name: ${{ github.event.inputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
